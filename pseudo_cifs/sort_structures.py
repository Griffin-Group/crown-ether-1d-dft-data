#!/usr/bin/env python3
"""
Takes two Structures with the same composition and reorders their atoms to
minimise the difference/distance between them.
Good for when you're going to generate an interpolation between two structures.

As a script, the files we want to sort are hard-coded.

Generated by LBL CBorg Coder (modified GPT OSS 120b), prompted and checked by
Bernard Field, 2025
"""
import numpy as np
from scipy.optimize import linear_sum_assignment
from pymatgen.core import Structure

def calculate_distance_matrix(structure1, structure2):
    """
    Calculate the pairwise distance matrix between atoms in two structures.

    Args:
        structure1 (Structure): First Pymatgen Structure object.
        structure2 (Structure): Second Pymatgen Structure object.

    Returns:
        np.ndarray: Distance matrix where entry [i, j] is the distance between
                    atom i in structure1 and atom j in structure2.
    """
    n_atoms = len(structure1)
    distance_matrix = np.zeros((n_atoms, n_atoms))

    for i, site1 in enumerate(structure1):
        for j, site2 in enumerate(structure2):
            distance_matrix[i, j] = site1.distance(site2)

    return distance_matrix

def reorder_structure(structure, permutation):
    """
    Reorder the sites in a structure according to a given permutation.

    Args:
        structure (Structure): Pymatgen Structure object.
        permutation (list): List of indices indicating the new order of sites.

    Returns:
        Structure: New structure with sites reordered.
    """
    new_sites = [structure[perm] for perm in permutation]
    return Structure.from_sites(new_sites)

def minimize_structure_difference(structure1, structure2):
    """
    Reorder the sites in structure2 to minimize the total distance to structure1.

    Args:
        structure1 (Structure): First Pymatgen Structure object.
        structure2 (Structure): Second Pymatgen Structure object.

    Returns:
        Structure: Reordered structure2 that minimizes the total distance to structure1.
    """
    # Calculate the distance matrix
    distance_matrix = calculate_distance_matrix(structure1, structure2)

    # Use the Hungarian algorithm to find the optimal assignment
    row_ind, col_ind = linear_sum_assignment(distance_matrix)

    # Create the permutation array
    permutation = col_ind.tolist()

    # Reorder structure2 based on the permutation
    reordered_structure2 = reorder_structure(structure2, permutation)

    return reordered_structure2

if __name__ == "__main__":
    struct1 = Structure.from_file('symmetrised_original_primitive.vasp')
    struct2 = Structure.from_file('pseudo_primitive_square.vasp')
    reordered_struct2 = minimize_structure_difference(struct1, struct2)
    reordered_struct2.to_file('pseudo_primitive_square_sorted.vasp', fmt='poscar')
